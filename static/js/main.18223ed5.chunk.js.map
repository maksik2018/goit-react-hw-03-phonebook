{"version":3,"sources":["components/Container/Container.styled.jsx","components/Container/Container.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","reportWebVitals.js","index.js"],"names":["Div","styled","div","Container","children","ContactForm","state","name","number","onChange","event","value","currentTarget","setState","onSubmit","preventDefault","props","this","placeholder","type","pattern","title","required","Component","List","ul","Item","li","ContactList","contacts","onDeleteContact","map","id","onClick","Filter","App","initialContacts","filter","target","addContact","data","newContact","nextId","find","contact","toLowerCase","alert","prev","deleteContact","contactId","onFilterChange","targetValue","filterByName","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","prevState","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18223ed5.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Div = styled.div`\r\n  margin-left: 30px;\r\n`;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Div } from '../Container/Container.styled';\r\n\r\nexport default function Container({ children }) {\r\n  return <Div>{children}</Div>;\r\n }\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  onChange = event => {\r\n    const value = event.currentTarget.value;\r\n    const name = event.currentTarget.name;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  onSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form onSubmit={this.onSubmit}>\r\n         <input\r\n          placeholder=\"indicate your name\"\r\n          value={name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={this.onChange}\r\n        />\r\n           <input\r\n          placeholder=\"indicate your phone number\"\r\n          value={number}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={this.onChange}\r\n        />\r\n        <button type='submit'>Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nContactForm.propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n    onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const List = styled.ul`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\nexport const Item = styled.li`\r\n  margin-right: 40px;\r\n  list-style: none;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { List, Item} from \"../ContactList/ContactList.styled\";\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n  <List>\r\n    {contacts.map(({ id, name, number }) => (\r\n      <Item key={id} >\r\n        <p>{name}</p>\r\n        <p>{number}</p>\r\n        <button type=\"button\" onClick={() => onDeleteContact(id)}>Удалить</button>\r\n      </Item>\r\n    ))}\r\n  </List>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n    <label>\r\n        Find contacts by name <input type=\"text\" value={value} onChange={onChange} />\r\n    </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import React, { Component } from \"react\";\nimport nextId from \"react-id-generator\";\nimport Container from \"./components/Container/Container\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList.jsx\";\nimport Filter from \"./components/Filter/Filter.jsx\";\nimport initialContacts from \"./components/Contacts.json\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n  state = {\n    contacts: initialContacts,\n\n    filter: \"\",\n  };\n\n  onChange = (event) => {\n    const value = event.target.value;\n    const name = event.target.name;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  addContact = (data) => {\n    const { name, number } = data;\n    const { contacts } = this.state;\n    const id = nextId();\n    const newContact = {\n      name,\n      id,\n      number,\n    };\n\n    const checkOnContact = contacts.find(\n      (contact) => contact.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n\n    if (checkOnContact) {\n      alert(`${newContact.name} is already in contacts`);\n    } else {\n      this.setState((prev) => ({\n        contacts: [...prev.contacts, newContact],\n      }));\n    }\n  };\n\n  deleteContact = (contactId) => {\n    this.setState((prev) => ({\n      contacts: prev.contacts.filter((contact) => contactId !== contact.id),\n    }));\n  };\n\n  onFilterChange = (event) => {\n    const targetValue = event.target.value;\n    this.setState({\n      filter: targetValue,\n    });\n  };\n\n  filterByName = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n    // console.log(parsedContacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log(\"App componentDidUpdate\");\n    if (this.state.contacts !== prevState.contacts) {\n      // console.log(\"обновилось поле contacts\");\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n  render() {\n    const { filter } = this.state;\n    return (\n      <Container>\n        <h1> Phonebook </h1>\n        <h2>Add new contact</h2>\n        <ContactForm onSubmit={this.addContact} />\n        <h2>Find contact</h2>\n        <Filter value={filter} onChange={this.onFilterChange} />\n        <h2>Contact list</h2>\n        <ContactList\n          contacts={this.filterByName()}\n          onDeleteContact={this.deleteContact}\n        />\n      </Container>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}